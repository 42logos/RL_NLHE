#!/usr/bin/env python3
"""
Post-build script to fix nlhe_engine __init__.py import issues.

This script automatically corrects the __init__.py file generated by maturin
to properly handle the nlhe_engine module references.

Run this script after building the Rust extension to ensure imports work correctly.
"""

import os
import sys
from pathlib import Path

def find_nlhe_engine_init():
    """Find the nlhe_engine __init__.py file in the current Python environment."""
    # Try to import nlhe_engine to get its location
    try:
        import nlhe_engine
        init_path = Path(nlhe_engine.__file__)
        return init_path
    except ImportError:
        # If import fails, try to find it in site-packages
        import site
        for site_dir in site.getsitepackages():
            init_path = Path(site_dir) / "nlhe_engine" / "__init__.py"
            if init_path.exists():
                return init_path
    
    return None

def fix_init_py(init_path: Path):
    """Fix the __init__.py file to properly import the module before referencing it."""
    
    # Read the current content
    try:
        with open(init_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"Error reading {init_path}: {e}")
        return False
    
    # Check if it needs fixing
    if "from . import nlhe_engine" in content:
        print(f"‚úÖ {init_path} is already fixed")
        return True
    
    # Expected problematic pattern
    problematic_pattern = """from .nlhe_engine import *

__doc__ = nlhe_engine.__doc__
if hasattr(nlhe_engine, "__all__"):
    __all__ = nlhe_engine.__all__"""
    
    # Fixed pattern
    fixed_pattern = """from .nlhe_engine import *

# Import the module to access its attributes
from . import nlhe_engine

__doc__ = nlhe_engine.__doc__
if hasattr(nlhe_engine, "__all__"):
    __all__ = nlhe_engine.__all__"""
    
    if problematic_pattern in content:
        # Apply the fix
        new_content = content.replace(problematic_pattern, fixed_pattern)
        
        try:
            with open(init_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            print(f"‚úÖ Fixed {init_path}")
            return True
        except Exception as e:
            print(f"‚ùå Error writing {init_path}: {e}")
            return False
    else:
        print(f"‚ö†Ô∏è  {init_path} doesn't match expected pattern, may already be fixed or different")
        print(f"Current content:\n{content}")
        return False

def main():
    """Main function to fix the nlhe_engine __init__.py file."""
    print("üîß Post-build fix for nlhe_engine __init__.py")
    
    init_path = find_nlhe_engine_init()
    if not init_path:
        print("‚ùå Could not find nlhe_engine __init__.py file")
        print("Make sure the nlhe_engine package is installed")
        return 1
    
    print(f"üìÅ Found __init__.py at: {init_path}")
    
    if fix_init_py(init_path):
        print("üéâ nlhe_engine __init__.py fix complete!")
        
        # Test the import
        try:
            # Clear the module from cache if it exists
            if 'nlhe_engine' in sys.modules:
                del sys.modules['nlhe_engine']
            
            import nlhe_engine
            if hasattr(nlhe_engine, 'NLHEngine'):
                print("‚úÖ Import test successful - NLHEngine is available")
                return 0
            else:
                print("‚ùå Import test failed - NLHEngine not found")
                return 1
        except Exception as e:
            print(f"‚ùå Import test failed: {e}")
            return 1
    else:
        print("‚ùå Failed to fix __init__.py")
        return 1

if __name__ == "__main__":
    sys.exit(main())